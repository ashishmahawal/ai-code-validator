name: PR Checks

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

# Prevent multiple workflow runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Validate PR title and description
  pr-validation:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false

      - name: Check PR has description
        run: |
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "::error::PR description cannot be empty"
            exit 1
          fi

  # Ensure tests pass
  required-tests:
    name: Required Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          pytest --cov=ai_code_validator --cov-fail-under=70 --cov-report=term

      - name: Check for test failures
        if: failure()
        run: |
          echo "::error::Tests failed. Please fix failing tests before merging."
          exit 1

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Check code formatting
        run: |
          black --check ai_code_validator tests || (echo "::error::Code formatting issues found. Run 'black .' to fix." && exit 1)

      - name: Check import sorting
        run: |
          isort --check-only ai_code_validator tests || (echo "::error::Import sorting issues found. Run 'isort .' to fix." && exit 1)

      - name: Run linter
        run: |
          flake8 ai_code_validator tests --max-line-length=100

  # Check for common issues
  safety-checks:
    name: Safety Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v3

      - name: Check for merge conflicts
        run: |
          if grep -r "<<<<<<< HEAD" .; then
            echo "::error::Merge conflict markers found"
            exit 1
          fi

      - name: Check for debug statements
        run: |
          if grep -r "import pdb\|breakpoint()" ai_code_validator/; then
            echo "::error::Debug statements found (pdb/breakpoint)"
            exit 1
          fi

      - name: Check for print statements
        run: |
          if grep -r "print(" ai_code_validator/ --exclude="reporter.py" --exclude="cli.py"; then
            echo "::warning::Print statements found. Consider using logging instead."
          fi

      - name: Check file size
        run: |
          find . -type f -size +1M | while read file; do
            echo "::warning::Large file detected: $file"
          done

  # Validate no secrets in code
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary comment on PR
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [required-tests, code-quality, safety-checks]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v6
        with:
          script: |
            const jobs = ${{ toJson(needs) }};
            let allPassed = true;
            let message = '## ✅ PR Checks Summary\n\n';

            for (const [job, result] of Object.entries(jobs)) {
              const icon = result.result === 'success' ? '✅' : '❌';
              message += `${icon} ${job}: ${result.result}\n`;
              if (result.result !== 'success') allPassed = false;
            }

            if (allPassed) {
              message += '\n🎉 All checks passed! Ready for review.';
            } else {
              message += '\n⚠️ Some checks failed. Please review and fix issues.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
